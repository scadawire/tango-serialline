/*----- PROTECTED REGION ID(SerialClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id: SerialClass.cpp,v 1.13 2011-09-22 06:11:43 pascal_verdier Exp $";
static const char *TagName    = "$Name: not supported by cvs2svn $";
static const char *CvsPath    = "$Source: /users/chaize/newsvn/cvsroot/Communication/SerialLine/src/SerialClass.cpp,v $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        SerialClass.cpp
//
// description : C++ source for the SerialClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the «name» once per process.
//
// project :     TANGO Device Server.
//
// $Author: pascal_verdier $
//
// $Revision: 1.13 $
// $Date: 2011-09-22 06:11:43 $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source: /users/chaize/newsvn/cvsroot/Communication/SerialLine/src/SerialClass.cpp,v $
// $Log: not supported by cvs2svn $
// Revision 1.12  2010/12/07 09:08:49  pascal_verdier
// Moved to Pogo-7 code generator.
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <Serial.h>
#include <SerialClass.h>

/*----- PROTECTED REGION END -----*/	//	SerialClass.cpp

//-------------------------------------------------------------------
/**
 *	Create SerialClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_Serial_class(const char *name) {
		return Serial_ns::SerialClass::init(name);
	}
}

namespace Serial_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
SerialClass *SerialClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		SerialClass::SerialClass(string &s)
 * description : 	constructor for the SerialClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
SerialClass::SerialClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering SerialClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();

	/*----- PROTECTED REGION ID(SerialClass::constructor) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	SerialClass::constructor

	cout2 << "Leaving SerialClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		SerialClass::~SerialClass()
 * description : 	destructor for the SerialClass
 */
//--------------------------------------------------------
SerialClass::~SerialClass()
{
	/*----- PROTECTED REGION ID(SerialClass::destructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	SerialClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		SerialClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
SerialClass *SerialClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new SerialClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		SerialClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
SerialClass *SerialClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		DevSerWriteStringClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerWriteStringClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerWriteStringClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_write_string(argin));
}

//--------------------------------------------------------
/**
 * method : 		DevSerWriteCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerWriteCharClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerWriteCharClass::execute(): arrived" << endl;
	const Tango::DevVarCharArray *argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_write_char(argin));
}

//--------------------------------------------------------
/**
 * method : 		DevSerReadStringClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadStringClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadStringClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_string(argin));
}

//--------------------------------------------------------
/**
 * method : 		DevSerReadCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadCharClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadCharClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_char(argin));
}

//--------------------------------------------------------
/**
 * method : 		WriteReadClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *WriteReadClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "WriteReadClass::execute(): arrived" << endl;
	const Tango::DevVarLongStringArray *argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->write_read(argin));
}

//--------------------------------------------------------
/**
 * method : 		DevSerGetNCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerGetNCharClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "DevSerGetNCharClass::execute(): arrived" << endl;
	return insert((static_cast<Serial *>(device))->dev_ser_get_nchar());
}

//--------------------------------------------------------
/**
 * method : 		DevSerReadNCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadNCharClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadNCharClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_nchar(argin));
}

//--------------------------------------------------------
/**
 * method : 		DevSerReadRawClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadRawClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "DevSerReadRawClass::execute(): arrived" << endl;
	return insert((static_cast<Serial *>(device))->dev_ser_read_raw());
}

//--------------------------------------------------------
/**
 * method : 		DevSerReadLineClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadLineClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "DevSerReadLineClass::execute(): arrived" << endl;
	return insert((static_cast<Serial *>(device))->dev_ser_read_line());
}

//--------------------------------------------------------
/**
 * method : 		DevSerFlushClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerFlushClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerFlushClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_flush(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DevSerSetParameterClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetParameterClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetParameterClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_parameter(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DevSerSetTimeoutClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetTimeoutClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetTimeoutClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_timeout(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DevSerSetParityClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetParityClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetParityClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_parity(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DevSerSetCharLengthClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetCharLengthClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetCharLengthClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_char_length(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DevSerSetStopbitClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetStopbitClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetStopbitClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_stopbit(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DevSerSetBaudrateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetBaudrateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetBaudrateClass::execute(): arrived" << endl;
	Tango::DevULong argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_baudrate(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DevSerSetNewlineClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetNewlineClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetNewlineClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_newline(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DevSerReadRetryClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadRetryClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadRetryClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_retry(argin));
}

//--------------------------------------------------------
/**
 * method : 		DevSerReadNBinDataClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadNBinDataClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadNBinDataClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_nbin_data(argin));
}

//--------------------------------------------------------
/**
 * method : 		DevSerWaitCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerWaitCharClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "DevSerWaitCharClass::execute(): arrived" << endl;
	return insert((static_cast<Serial *>(device))->dev_ser_wait_char());
}

//--------------------------------------------------------
/**
 * method : 		DevSerSetParameterCompatClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetParameterCompatClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetParameterCompatClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_parameter_compat(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DevSerFlushCompatClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerFlushCompatClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerFlushCompatClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_flush_compat(argin));
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : SerialClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum SerialClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SerialClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum SerialClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SerialClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum SerialClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SerialClass::get_class_property()
 *	Description : Read database to initialize class property data members.
 */
//--------------------------------------------------------
void SerialClass::get_class_property()
{
	/*----- PROTECTED REGION ID(SerialClass::get_class_property_before) ENABLED START -----*/
	
	//	Initialize class property data members
	
	/*----- PROTECTED REGION END -----*/	//	SerialClass::get_class_property_before
	//	Read class properties from database.
	cl_prop.push_back(Tango::DbDatum("Simulated"));
	
	//	Call database and extract values
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;

	//	Try to extract Simulated value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  simulated;
	else
	{
		//	Check default value for Simulated
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  simulated;
			cl_prop[i]  <<  simulated;
		}
	}
	/*----- PROTECTED REGION ID(SerialClass::get_class_property_after) ENABLED START -----*/
	
	//	Check class property data members init
	
	/*----- PROTECTED REGION END -----*/	//	SerialClass::get_class_property_after

}

//--------------------------------------------------------
/**
 *	Method      : SerialClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void SerialClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties
	prop_name = "Simulated";
	prop_desc = "If this property is true, do not connect to the serial port.\nIt is used when another device simulated this one.";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);

	//	Set Default device Properties
	prop_name = "Serialline";
	prop_desc = "The path and name of the serial line device to be used.";
	prop_def  = "/dev/ttyR1";
	vect_data.clear();
	vect_data.push_back("/dev/ttyR1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Timeout";
	prop_desc = "The timout value im ms for for answers of requests send to the serial line.\nThis value should be lower than the Tango client server timout value.";
	prop_def  = "100";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Parity";
	prop_desc = "The parity used with the serial line protocol.\nThe possibilities are none, even or odd.";
	prop_def  = "none";
	vect_data.clear();
	vect_data.push_back("none");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Charlength";
	prop_desc = "The character length used with the serial line protocol.\nThe possibilities are 8, 7, 6 or 5 bits per character.";
	prop_def  = "8";
	vect_data.clear();
	vect_data.push_back("8");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Stopbits";
	prop_desc = "The number of stop bits used with the serial line protocol.\nThe possibilities are 1 or 2 stop bits";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Baudrate";
	prop_desc = "The communication speed in baud used with the serial line protocol.";
	prop_def  = "9600";
	vect_data.clear();
	vect_data.push_back("9600");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Newline";
	prop_desc = "End of message Character used in particular by the DevSerReadLine command\nDefault = 13";
	prop_def  = "13";
	vect_data.clear();
	vect_data.push_back("13");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Simulated";
	prop_desc = "If this property is true, do not connect to the serial port.\nIt is used when another device simulated this one.";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : SerialClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void SerialClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("TANGO Device Server");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("C++ source for the SerialClass");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : SerialClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void SerialClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(SerialClass::device_factory_before) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	SerialClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new Serial(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		Serial *dev = static_cast<Serial *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(SerialClass::device_factory_after) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	SerialClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SerialClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void SerialClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(SerialClass::attribute_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	SerialClass::attribute_factory_before

	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(SerialClass::attribute_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	SerialClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SerialClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void SerialClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(SerialClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SerialClass::pipe_factory_before
	/*----- PROTECTED REGION ID(SerialClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SerialClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SerialClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void SerialClass::command_factory()
{
	/*----- PROTECTED REGION ID(SerialClass::command_factory_before) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	SerialClass::command_factory_before


	//	Command DevSerWriteString
	DevSerWriteStringClass	*pDevSerWriteStringCmd =
		new DevSerWriteStringClass("DevSerWriteString",
			Tango::DEV_STRING, Tango::DEV_LONG,
			"String to write",
			"Number of characters written",
			Tango::OPERATOR);
	command_list.push_back(pDevSerWriteStringCmd);

	//	Command DevSerWriteChar
	DevSerWriteCharClass	*pDevSerWriteCharCmd =
		new DevSerWriteCharClass("DevSerWriteChar",
			Tango::DEVVAR_CHARARRAY, Tango::DEV_LONG,
			"Characters to write",
			"Number of characters written",
			Tango::OPERATOR);
	command_list.push_back(pDevSerWriteCharCmd);

	//	Command DevSerReadString
	DevSerReadStringClass	*pDevSerReadStringCmd =
		new DevSerReadStringClass("DevSerReadString",
			Tango::DEV_LONG, Tango::DEV_STRING,
			"type of read SL_RAW SL_NCHAR SL_LINE",
			"String read",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadStringCmd);

	//	Command DevSerReadChar
	DevSerReadCharClass	*pDevSerReadCharCmd =
		new DevSerReadCharClass("DevSerReadChar",
			Tango::DEV_LONG, Tango::DEVVAR_CHARARRAY,
			"type of read SL_RAW SL_NCHAR SL_LINE",
			"Array of characters read",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadCharCmd);

	//	Command WriteRead
	WriteReadClass	*pWriteReadCmd =
		new WriteReadClass("WriteRead",
			Tango::DEVVAR_LONGSTRINGARRAY, Tango::DEV_STRING,
			"type of reading strategy(RAW,NCHAR..),command to write on the port com",
			"response of the device behind the serial line",
			Tango::OPERATOR);
	command_list.push_back(pWriteReadCmd);

	//	Command DevSerGetNChar
	DevSerGetNCharClass	*pDevSerGetNCharCmd =
		new DevSerGetNCharClass("DevSerGetNChar",
			Tango::DEV_VOID, Tango::DEV_LONG,
			"no argin",
			"number of char available in receiving buffer",
			Tango::OPERATOR);
	command_list.push_back(pDevSerGetNCharCmd);

	//	Command DevSerReadNChar
	DevSerReadNCharClass	*pDevSerReadNCharCmd =
		new DevSerReadNCharClass("DevSerReadNChar",
			Tango::DEV_LONG, Tango::DEV_STRING,
			"number of the caracters to read on the serial line",
			"pointer to the string read updated",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadNCharCmd);

	//	Command DevSerReadRaw
	DevSerReadRawClass	*pDevSerReadRawCmd =
		new DevSerReadRawClass("DevSerReadRaw",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"no argin",
			"pointer to the string read updated",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadRawCmd);

	//	Command DevSerReadLine
	DevSerReadLineClass	*pDevSerReadLineCmd =
		new DevSerReadLineClass("DevSerReadLine",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"no argin",
			"pointer to the string read updated",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadLineCmd);

	//	Command DevSerFlush
	DevSerFlushClass	*pDevSerFlushCmd =
		new DevSerFlushClass("DevSerFlush",
			Tango::DEV_LONG, Tango::DEV_VOID,
			"flush to do 0=input 1=output 2=both",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerFlushCmd);

	//	Command DevSerSetParameter
	DevSerSetParameterClass	*pDevSerSetParameterCmd =
		new DevSerSetParameterClass("DevSerSetParameter",
			Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
			"device parameters in pair",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetParameterCmd);

	//	Command DevSerSetTimeout
	DevSerSetTimeoutClass	*pDevSerSetTimeoutCmd =
		new DevSerSetTimeoutClass("DevSerSetTimeout",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"Value of the timeout to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetTimeoutCmd);

	//	Command DevSerSetParity
	DevSerSetParityClass	*pDevSerSetParityCmd =
		new DevSerSetParityClass("DevSerSetParity",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"The new parity to set.",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetParityCmd);

	//	Command DevSerSetCharLength
	DevSerSetCharLengthClass	*pDevSerSetCharLengthCmd =
		new DevSerSetCharLengthClass("DevSerSetCharLength",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"The new charlength to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetCharLengthCmd);

	//	Command DevSerSetStopbit
	DevSerSetStopbitClass	*pDevSerSetStopbitCmd =
		new DevSerSetStopbitClass("DevSerSetStopbit",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"The new stopbit to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetStopbitCmd);

	//	Command DevSerSetBaudrate
	DevSerSetBaudrateClass	*pDevSerSetBaudrateCmd =
		new DevSerSetBaudrateClass("DevSerSetBaudrate",
			Tango::DEV_ULONG, Tango::DEV_VOID,
			"The new baudrate to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetBaudrateCmd);

	//	Command DevSerSetNewline
	DevSerSetNewlineClass	*pDevSerSetNewlineCmd =
		new DevSerSetNewlineClass("DevSerSetNewline",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"The new line character to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetNewlineCmd);

	//	Command DevSerReadRetry
	DevSerReadRetryClass	*pDevSerReadRetryCmd =
		new DevSerReadRetryClass("DevSerReadRetry",
			Tango::DEV_LONG, Tango::DEV_STRING,
			"number of reading retries",
			"pointer to the string read updated",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadRetryCmd);

	//	Command DevSerReadNBinData
	DevSerReadNBinDataClass	*pDevSerReadNBinDataCmd =
		new DevSerReadNBinDataClass("DevSerReadNBinData",
			Tango::DEV_LONG, Tango::DEVVAR_CHARARRAY,
			"nb char to read",
			"array of data",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadNBinDataCmd);

	//	Command DevSerWaitChar
	DevSerWaitCharClass	*pDevSerWaitCharCmd =
		new DevSerWaitCharClass("DevSerWaitChar",
			Tango::DEV_VOID, Tango::DEV_LONG,
			"",
			"Number of charcters in reading buffer",
			Tango::OPERATOR);
	command_list.push_back(pDevSerWaitCharCmd);

	//	Command DevSerSetParameterCompat
	DevSerSetParameterCompatClass	*pDevSerSetParameterCompatCmd =
		new DevSerSetParameterCompatClass("DevSerSetParameterCompat",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"Device parameters in pairs as a short array",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetParameterCompatCmd);

	//	Command DevSerFlushCompat
	DevSerFlushCompatClass	*pDevSerFlushCompatCmd =
		new DevSerFlushCompatClass("DevSerFlushCompat",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"flush to do 0=input 1=output 2=both",
			"",
			Tango::OPERATOR);
	command_list.push_back(pDevSerFlushCompatCmd);

	/*----- PROTECTED REGION ID(SerialClass::command_factory_after) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	SerialClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		SerialClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void SerialClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(SerialClass::create_static_att_list) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	SerialClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		SerialClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void SerialClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		Serial *dev = static_cast<Serial *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(SerialClass::erase_dynamic_attributes) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	SerialClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : SerialClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *SerialClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(SerialClass::Additional Methods) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	SerialClass::Additional Methods
} //	namespace
