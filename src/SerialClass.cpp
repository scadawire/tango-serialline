/*----- PROTECTED REGION ID(SerialClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id: SerialClass.cpp,v 1.12 2010-12-07 09:08:49 pascal_verdier Exp $";
static const char *TagName    = "$Name: not supported by cvs2svn $";
static const char *CvsPath    = "$Source: /users/chaize/newsvn/cvsroot/Communication/SerialLine/src/SerialClass.cpp,v $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        SerialClass.cpp
//
// description : C++ source for the SerialClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the «name» once per process.
//
// project :     TANGO Device Server.
//
// $Author: pascal_verdier $
//
// $Revision: 1.12 $
// $Date: 2010-12-07 09:08:49 $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source: /users/chaize/newsvn/cvsroot/Communication/SerialLine/src/SerialClass.cpp,v $
// $Log: not supported by cvs2svn $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <Serial.h>
#include <SerialClass.h>

/*----- PROTECTED REGION END -----*/

//-------------------------------------------------------------------
/**
 *	Create SerialClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_Serial_class(const char *name) {
		return Serial_ns::SerialClass::init(name);
	}
}


namespace Serial_ns
{


//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
SerialClass *SerialClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		SerialClass::SerialClass(string &s)
 * description : 	constructor for the SerialClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
SerialClass::SerialClass(string &s):DeviceClass(s)
{
	cout2 << "Entering SerialClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();

	/*----- PROTECTED REGION ID(Serial::Class::constructor) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::constructor

	cout2 << "Leaving SerialClass constructor" << endl;
}


//--------------------------------------------------------
/**
 * method : 		SerialClass::~SerialClass()
 * description : 	destructor for the SerialClass
 */
//--------------------------------------------------------
SerialClass::~SerialClass()
{
	/*----- PROTECTED REGION ID(Serial::Class::destructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		SerialClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
SerialClass *SerialClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new SerialClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		SerialClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
SerialClass *SerialClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}




//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		DevSerWriteStringClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerWriteStringClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerWriteStringClass::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_write_string(argin));
}
//--------------------------------------------------------
/**
 * method : 		DevSerWriteCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerWriteCharClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerWriteCharClass::execute(): arrived" << endl;

	const Tango::DevVarCharArray	*argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_write_char(argin));
}
//--------------------------------------------------------
/**
 * method : 		DevSerReadStringClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadStringClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadStringClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_string(argin));
}
//--------------------------------------------------------
/**
 * method : 		DevSerReadCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadCharClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadCharClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_char(argin));
}
//--------------------------------------------------------
/**
 * method : 		WriteReadClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *WriteReadClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "WriteReadClass::execute(): arrived" << endl;

	const Tango::DevVarLongStringArray	*argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->write_read(argin));
}
//--------------------------------------------------------
/**
 * method : 		DevSerGetNCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerGetNCharClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerGetNCharClass::execute(): arrived" << endl;

	
	return insert((static_cast<Serial *>(device))->dev_ser_get_nchar());
}
//--------------------------------------------------------
/**
 * method : 		DevSerReadNCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadNCharClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadNCharClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_nchar(argin));
}
//--------------------------------------------------------
/**
 * method : 		DevSerReadRawClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadRawClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadRawClass::execute(): arrived" << endl;

	
	return insert((static_cast<Serial *>(device))->dev_ser_read_raw());
}
//--------------------------------------------------------
/**
 * method : 		DevSerReadLineClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadLineClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadLineClass::execute(): arrived" << endl;

	
	return insert((static_cast<Serial *>(device))->dev_ser_read_line());
}
//--------------------------------------------------------
/**
 * method : 		DevSerFlushClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerFlushClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerFlushClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_flush(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DevSerSetParameterClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetParameterClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetParameterClass::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_parameter(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DevSerSetTimeoutClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetTimeoutClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetTimeoutClass::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_timeout(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DevSerSetParityClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetParityClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetParityClass::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_parity(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DevSerSetCharLengthClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetCharLengthClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetCharLengthClass::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_char_length(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DevSerSetStopbitClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetStopbitClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetStopbitClass::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_stopbit(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DevSerSetBaudrateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetBaudrateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetBaudrateClass::execute(): arrived" << endl;

	Tango::DevULong	argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_baudrate(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DevSerSetNewlineClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerSetNewlineClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerSetNewlineClass::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);
	((static_cast<Serial *>(device))->dev_ser_set_newline(argin));
	return new CORBA::Any();
}
//--------------------------------------------------------
/**
 * method : 		DevSerReadRetryClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadRetryClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadRetryClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_retry(argin));
}
//--------------------------------------------------------
/**
 * method : 		DevSerReadNBinDataClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DevSerReadNBinDataClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DevSerReadNBinDataClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);
	return insert((static_cast<Serial *>(device))->dev_ser_read_nbin_data(argin));
}




//===================================================================
//	Properties management
//===================================================================

//--------------------------------------------------------
/**
 * method : 		SerialClass::get_class_property
 * description : 	Get the class property for specified name.
 *
 * @param	name  The property name
 */
//--------------------------------------------------------
Tango::DbDatum SerialClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : Serial::SerialClass::get_default_device_property()()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum SerialClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : Serial::SerialClass::get_default_class_property()()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum SerialClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : Serial::SerialClass::get_class_property()
 *	Description : //	Add your own code to initialize
 */
//--------------------------------------------------------
void SerialClass::get_class_property()
{
	/*----- PROTECTED REGION ID(Serial::Class::get_class_property_before) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::get_class_property_before

	//	Read class properties from database.
	

	if (cl_prop.size()==0) return;	//	No property to read

	//	Call database and extract values
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;


	/*----- PROTECTED REGION ID(Serial::Class::get_class_property_after) ENABLED START -----*/

	//	Check class property data members init

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::get_class_property_after

}


//--------------------------------------------------------
/**
 *	Method      : Serial::SerialClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *	              For each property, add to wizard property name and description.
 *	              If default value has been set, add it to wizard property and.
 *	              store it in a DbDatum.
 */
//--------------------------------------------------------
void SerialClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;
	
	//	Set Default Class Properties

	//	Set Default Device Properties

	prop_name = "Serialline";
	prop_desc = "The path and name of the serial line device to be used.";
	prop_def  = "/dev/ttyR1\n";
	vect_data.clear();
	vect_data.push_back("/dev/ttyR1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Timeout";
	prop_desc = "The timout value im ms for for answers of requests send to the serial line.  This value should be lower than the Tango client server timout value.";
	prop_def  = "100\n";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Parity";
	prop_desc = "The parity used with the serial line protocol.  The possibilities are none, even or odd.";
	prop_def  = "none\n";
	vect_data.clear();
	vect_data.push_back("none");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Charlength";
	prop_desc = "The character length used with the serial line protocol.  The possibilities are 8, 7, 6 or 5 bits per character.";
	prop_def  = "8\n";
	vect_data.clear();
	vect_data.push_back("8");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Stopbits";
	prop_desc = "The number of stop bits used with the serial line protocol.  The possibilities are 1 or 2 stop bits";
	prop_def  = "1\n";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Baudrate";
	prop_desc = "The communication speed in baud used with the serial line protocol.";
	prop_def  = "9600\n";
	vect_data.clear();
	vect_data.push_back("9600");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Newline";
	prop_desc = "End of message Character used in particular by the DevSerReadLine command  Default = 13";
	prop_def  = "13\n";
	vect_data.clear();
	vect_data.push_back("13");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}


//--------------------------------------------------------
/**
 *	Method      : Serial::SerialClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void SerialClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("TANGO Device Server");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("C++ source for the SerialClass");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs or svn location
	string	filename("Serial");
	filename += "Class.cpp";
	
	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}
	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_4Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}




//===================================================================
//	Factory methods
//===================================================================


//--------------------------------------------------------
/**
 * method : 		SerialClass::device_factory
 * description : 	Create the device object(s)
 *                  and store them in the device list
 *
 * @param	*devlist_ptr	The device name list
 */
//--------------------------------------------------------
void SerialClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	/*----- PROTECTED REGION ID(Serial::Class::device_factory_before) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::device_factory_before

	//	Create all devices.
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;

		//	Create devices and add it into the device list
		device_list.push_back(new Serial(this, (*devlist_ptr)[i]));							 

		//	Export device to the outside world
		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	/*----- PROTECTED REGION ID(Serial::Class::device_factory_after) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::device_factory_after

	
}


//--------------------------------------------------------
/**
 *	Method      : Serial::SerialClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *	              and store them in the attribute list
 */
//--------------------------------------------------------
void SerialClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(Serial::Class::attribute_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::attribute_factory_before


	/*----- PROTECTED REGION ID(Serial::Class::attribute_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::attribute_factory_after

}


//--------------------------------------------------------
/**
 *	Method      : Serial::SerialClass::command_factory()
 *	Description : Create the command object(s)
 *	              and store them in the command list
 */
//--------------------------------------------------------
void SerialClass::command_factory()
{
	/*----- PROTECTED REGION ID(Serial::Class::command_factory_before) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::command_factory_before

	DevSerWriteStringClass	*pDevSerWriteStringCmd =
		new DevSerWriteStringClass("DevSerWriteString",
			Tango::DEV_STRING, Tango::DEV_LONG,
			"String to write",
			"Number of characters written",
			Tango::OPERATOR);
	command_list.push_back(pDevSerWriteStringCmd);
	DevSerWriteCharClass	*pDevSerWriteCharCmd =
		new DevSerWriteCharClass("DevSerWriteChar",
			Tango::DEVVAR_CHARARRAY, Tango::DEV_LONG,
			"Characters to write",
			"Number of characters written",
			Tango::OPERATOR);
	command_list.push_back(pDevSerWriteCharCmd);
	DevSerReadStringClass	*pDevSerReadStringCmd =
		new DevSerReadStringClass("DevSerReadString",
			Tango::DEV_LONG, Tango::DEV_STRING,
			"type of read SL_RAW SL_NCHAR SL_LINE",
			"String read",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadStringCmd);
	DevSerReadCharClass	*pDevSerReadCharCmd =
		new DevSerReadCharClass("DevSerReadChar",
			Tango::DEV_LONG, Tango::DEVVAR_CHARARRAY,
			"type of read SL_RAW SL_NCHAR SL_LINE",
			"Array of characters read",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadCharCmd);
	WriteReadClass	*pWriteReadCmd =
		new WriteReadClass("WriteRead",
			Tango::DEVVAR_LONGSTRINGARRAY, Tango::DEV_STRING,
			"type of reading strategy(RAW,NCHAR..),command to write on the port com",
			"response of the device behind the serial line",
			Tango::OPERATOR);
	command_list.push_back(pWriteReadCmd);
	DevSerGetNCharClass	*pDevSerGetNCharCmd =
		new DevSerGetNCharClass("DevSerGetNChar",
			Tango::DEV_VOID, Tango::DEV_LONG,
			"no argin",
			"number of char available in receiving buffer",
			Tango::OPERATOR);
	command_list.push_back(pDevSerGetNCharCmd);
	DevSerReadNCharClass	*pDevSerReadNCharCmd =
		new DevSerReadNCharClass("DevSerReadNChar",
			Tango::DEV_LONG, Tango::DEV_STRING,
			"number of the caracters to read on the serial line",
			"pointer to the string read updated",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadNCharCmd);
	DevSerReadRawClass	*pDevSerReadRawCmd =
		new DevSerReadRawClass("DevSerReadRaw",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"no argin",
			"pointer to the string read updated",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadRawCmd);
	DevSerReadLineClass	*pDevSerReadLineCmd =
		new DevSerReadLineClass("DevSerReadLine",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"no argin",
			"pointer to the string read updated",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadLineCmd);
	DevSerFlushClass	*pDevSerFlushCmd =
		new DevSerFlushClass("DevSerFlush",
			Tango::DEV_LONG, Tango::DEV_VOID,
			"flush to do 0=input 1=output 2=both",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerFlushCmd);
	DevSerSetParameterClass	*pDevSerSetParameterCmd =
		new DevSerSetParameterClass("DevSerSetParameter",
			Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
			"device parameters in pair",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetParameterCmd);
	DevSerSetTimeoutClass	*pDevSerSetTimeoutCmd =
		new DevSerSetTimeoutClass("DevSerSetTimeout",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"Value of the timeout to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetTimeoutCmd);
	DevSerSetParityClass	*pDevSerSetParityCmd =
		new DevSerSetParityClass("DevSerSetParity",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"The new parity to set.",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetParityCmd);
	DevSerSetCharLengthClass	*pDevSerSetCharLengthCmd =
		new DevSerSetCharLengthClass("DevSerSetCharLength",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"The new charlength to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetCharLengthCmd);
	DevSerSetStopbitClass	*pDevSerSetStopbitCmd =
		new DevSerSetStopbitClass("DevSerSetStopbit",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"The new stopbit to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetStopbitCmd);
	DevSerSetBaudrateClass	*pDevSerSetBaudrateCmd =
		new DevSerSetBaudrateClass("DevSerSetBaudrate",
			Tango::DEV_ULONG, Tango::DEV_VOID,
			"The new baudrate to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetBaudrateCmd);
	DevSerSetNewlineClass	*pDevSerSetNewlineCmd =
		new DevSerSetNewlineClass("DevSerSetNewline",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"The new line character to set",
			"no argout",
			Tango::OPERATOR);
	command_list.push_back(pDevSerSetNewlineCmd);
	DevSerReadRetryClass	*pDevSerReadRetryCmd =
		new DevSerReadRetryClass("DevSerReadRetry",
			Tango::DEV_LONG, Tango::DEV_STRING,
			"number of reading retries",
			"pointer to the string read updated",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadRetryCmd);
	DevSerReadNBinDataClass	*pDevSerReadNBinDataCmd =
		new DevSerReadNBinDataClass("DevSerReadNBinData",
			Tango::DEV_LONG, Tango::DEVVAR_CHARARRAY,
			"nb char to read",
			"array of data",
			Tango::OPERATOR);
	command_list.push_back(pDevSerReadNBinDataCmd);

	/*----- PROTECTED REGION ID(Serial::Class::command_factory_after) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::command_factory_after

}



	/*----- PROTECTED REGION ID(Serial::Class::Additional Methods) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Serial::Class::Additional Methods

} //	namespace
