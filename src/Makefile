#PROTECTED REGION ID(SerialMakefile) ENABLED START#
#=============================================================================
#
# file :        Makefile
#
# description : Include for the Serial class.
#
# project :     Makefile to generate a Tango server
#
# $Author: pascal_verdier $
#
# $Revision: 1.10 $
#
# $Log: not supported by cvs2svn $
# Revision 2.0  2016/02/24 cmft
# Makefile updated for using Tango9 opt files. 
# 
# Revision 1.9  2010/12/07 09:08:49  pascal_verdier
# Moved to Pogo-7 code generator.
#
# Revision 1.8  2010/02/03 13:26:29  pascal_verdier
# State management added for linux.
#
# Revision 1.7  2009/12/11 06:53:04  pascal_verdier
# Makefile updated.
#
# Revision 1.6  2009/10/01 12:31:21  pascal_verdier
# Inheritance from Device_4Impl added.
#
# Revision 1.5  2005/03/22 08:02:30  taurel
# - Ported to Tango V5
# - Added small changed from AG in the Windows part (One Sleep to calm down thing and
#   some management of 0 character)
#
# Revision 1.1.1.1  2004/10/14 13:10:39  penel
# Initial Import
#
# Revision 1.1  2004/09/29 06:24:30  penel
# Initial revision
# Revision 1.3  2004/10/22 14:17:01  xavela
# xavier : only in win32 part, possibility to open a port COM higher than 9.
# changed TANGO_ROOT_WIN32 by SOLEIL_ROOT in the makefile.vc.
#
# Revision 1.2  2004/06/30 09:22:48  xavela
# xavier : ajout de la methode dev_ser_read_nretry()
# pour la partie win32
#
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


CLASS      = Serial
PACKAGE_NAME = $(CLASS)
MAJOR_VERS = 2
MINOR_VERS = 1
RELEASE    = Release_$(MAJOR_VERS)_$(MINOR_VERS)
OS         = $(shell /csadmin/common/scripts/get_os)
PROCESSOR  = $(shell uname -p)

#-----------------------------------------
#	Set default home directories
#-----------------------------------------



#=============================================================================
# MAKE_ENV is the path to find common environment to buil project
#
ifndef TANGO_HOME
    TANGO_HOME= $(shell pkg-config --variable prefix tango)
endif

ifndef MAKE_ENV
    MAKE_ENV = $(TANGO_HOME)/share/pogo/preferences/
endif


CPP_SERVERS  =  $(TANGO_HOME)/cppserver

ifdef no_debug
	DEBUG = -O
else
	DEBUG = -g
endif

ifdef _solaris
CC = CC 
BIN_DIR=$(OS)_CC

AR_SL = $(CC) -mt -G
VERS_OPT = -h
SL_EXT = so
endif

ifdef linux
CC = c++
CC_SHLIB = $(CC)  -fPIC
AR = ar

$(PROCESSOR)=1
ifdef x86_64
NBITS=_64
endif

ifndef
    BIN_DIR=$(OS)$(NBITS)
endif

AR_SL = $(CC) -fPIC -shared 
SL_EXT = so
VERS_OPT = -Wl,-soname,
endif

INCLUDE_DIRS =  -I$(TANGO_HOME)/$(BIN_DIR)/include	-I.	\
                -I$(CPP_SERVERS)/include

OBJS_DIR    = obj/$(BIN_DIR)
LIB_DIRS    = -L $(TANGO_HOME)/$(BIN_DIR)/lib

TARGET_LIB = $(TANGO_HOME)/$(BIN_DIR)/lib/libtgclasses.a


#-----------------------------------------
#	Set  CXXFLAGS and LFLAGS
#-----------------------------------------
ifdef _solaris
CXXFLAGS =  $(DEBUG) -mt -D_PTHREADS $(INCLUDE_DIRS)
LFLAGS =  $(DEBUG) $(LIB_DIRS)  		\
				-ltango			\
				-llog4tango		\
				-lomniORB4 		\
				-lomniDynamic4	\
				-lomnithread	\
				-lCOS4			\
				-lpthread		\
				-lposix4 -lsocket -lnsl
endif

ifdef linux
CXXFLAGS =  $(DEBUG) -D_REENTRANT $(INCLUDE_DIRS)
LFLAGS =  $(DEBUG) $(LIB_DIRS)  		\
				-ltango			\
				-llog4tango		\
				-lomniORB4 		\
				-lomniDynamic4	\
				-lomnithread	\
				-lCOS4			\
				-ldl -lpthread
endif

################################################################################
#=============================================================================
# OUTPUT_TYPE can be one of the following :
#   - 'STATIC_LIB' for a static library (.a)
#   - 'SHARED_LIB' for a dynamic library (.so)
#   - 'DEVICE' for a device server (will automatically include and link
#            with Tango dependencies)
#   - 'SIMPLE_EXE' for an executable with no dependency (for exemple the test tool
#                of a library with no Tango dependencies)
#
ifndef OUTPUT_TYPE
    OUTPUT_TYPE = DEVICE
endif

#=============================================================================
# OUTPUT_DIR  is the directory which contains the build result.
# if not set, the standard location is :
#	- ./shlib if OUTPUT_TYPE is SHARED_LIB
#	- ./lib   if OUTPUT_TYPE is STATIC_LIB
#	- ./bin for others
#
#OUTPUT_DIR =


#=============================================================================
# LIB_DIR_USER is the list of user library directories
#   - for a device server, tango libraries directories are automatically appended
#   - '-L ../lib' is automatically appended in all cases
#
LIB_DIR_USER= -ldl -lpthread

#=============================================================================
# TANGO_REQUIRED 
# - TRUE  : your project depends on TANGO
# - FALSE : your project does not depend on TANGO
#-----------------------------------------------------------------------------
# - NOTE : if PROJECT_TYPE is set to DEVICE, TANGO will be auto. added
#-----------------------------------------------------------------------------  
TANGO_REQUIRED = TRUE


#=============================================================================
#	include Standard TANGO compilation options
#
include $(MAKE_ENV)/tango.opt


################################################################################

#-----------------------------------------
#	Set  dependences
#-----------------------------------------

SVC_OBJS = $(OBJS_DIR)/$(CLASS).o \
		$(OBJS_DIR)/main.o	\
		$(OBJS_DIR)/ClassFactory.o	\
		$(OBJS_DIR)/$(CLASS)Class.o	\
		$(OBJS_DIR)/$(CLASS)StateMachine.o


SHLIB_OBJS = $(OBJS_DIR)/$(CLASS)Class.so.o	\
		$(OBJS_DIR)/$(CLASS)StateMachine.so.o	\
		$(OBJS_DIR)/$(CLASS).so.o

LIB_OBJS = $(SHLIB_OBJS)

SVC_INC = $(CLASS)Class.h \
		$(CLASS).h


$(OBJS_DIR)/%.o: %.cpp $(SVC_INC)
	$(CC) $(CXXFLAGS) -c $< -o $(OBJS_DIR)/$*.o
			
$(OBJS_DIR)/%.so.o: %.cpp $(SVC_INC)
	$(CC_SHLIB) $(CXXFLAGS) -c $< -o $(OBJS_DIR)/$*.so.o


#-----------------------------------------
#	 Make Entry
#-----------------------------------------

################################################################################
#=============================================================================
#	include common targets
#
include $(MAKE_ENV)/common_target.opt

################################################################################

shlib:	make_obj_dir make_shlib_dir $(SHLIB_OBJS)
	$(AR_SL) -o \
		shlib/$(BIN_DIR)/$(CLASS).$(SL_EXT).$(MAJOR_VERS).$(MINOR_VERS) \
		$(VERS_OPT)$(CLASS).$(SL_EXT).$(MAJOR_VERS) \
		$(SHLIB_OBJS) $(LFLAGS)
	@rm -f shlib/$(BIN_DIR)/$(CLASS).$(SL_EXT)
	@cd  shlib/$(BIN_DIR); \
		ln -s $(CLASS).$(SL_EXT).$(MAJOR_VERS).$(MINOR_VERS) $(CLASS).$(SL_EXT)

clean:
	rm -f $(OBJS_DIR)/*.o  \
	$(OBJS_DIR)/*.so.o \
	bin/$(BIN_DIR)/$(CLASS) \
	core

make_obj_dir:
	@mkdir -p obj
	@mkdir -p obj/$(BIN_DIR)

make_bin_dir:
	@mkdir -p bin
	@mkdir -p bin/$(BIN_DIR)

make_shlib_dir:
	@mkdir -p shlib
	@mkdir -p shlib/$(BIN_DIR)
	
#-----------------------------------------
#	 Install binary file
#-----------------------------------------
install:
	cp bin/$(BIN_DIR)/$(CLASS)  $(TANGO_HOME)/../bin/$(BIN_DIR)
	ls -l $(TANGO_HOME)/../bin/$(BIN_DIR)/$(CLASS)

#-----------------------------------------
#	 Update class library and header files
#	recompile without debug mode.
#-----------------------------------------
lib:
	@make no_debug=1
	cp *.h $(TANGO_HOME)/$(BIN_DIR)/include
	ar ruv $(TARGET_LIB) $(OBJS_DIR)/$(CLASS).o
	ar ruv $(TARGET_LIB) $(OBJS_DIR)/$(CLASS)Class.o
	ar ruv $(TARGET_LIB) $(OBJS_DIR)/$(CLASS)StateMachine.o
	ident  $(TARGET_LIB) | grep $(CLASS)

#----------------------------------------------------
#	Tag the CVS module corresponding to this class
#----------------------------------------------------
tag:
	@cvstag "$(CLASS)-$(RELEASE)"
	@make   $(CLASS)
	@make show_tag

show_tag:
	@cvstag -d 
#PROTECTED REGION END#
